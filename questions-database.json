[
  {
    "id": 1,
    "title": "Two Sum",
    "difficulty": "Easy",
    "category": "Array",
    "description": "Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.\n\nYou may assume that each input would have exactly one solution, and you may not use the same element twice.\n\nYou can return the answer in any order.",
    "examples": [
      {
        "input": "nums = [2,7,11,15], target = 9",
        "output": "[0,1]",
        "explanation": "Because nums[0] + nums[1] == 9, we return [0, 1]."
      },
      {
        "input": "nums = [3,2,4], target = 6",
        "output": "[1,2]"
      },
      {
        "input": "nums = [3,3], target = 6",
        "output": "[0,1]"
      }
    ],
    "constraints": [
      "2 <= nums.length <= 10^4",
      "-10^9 <= nums[i] <= 10^9",
      "-10^9 <= target <= 10^9",
      "Only one valid answer exists."
    ],
    "testCases": [
      {
        "input": { "nums": [2, 7, 11, 15], "target": 9 },
        "expected": [0, 1]
      },
      {
        "input": { "nums": [3, 2, 4], "target": 6 },
        "expected": [1, 2]
      },
      {
        "input": { "nums": [3, 3], "target": 6 },
        "expected": [0, 1]
      }
    ]
  },
  {
    "id": 2,
    "title": "Remove Duplicates from Sorted Array",
    "difficulty": "Easy",
    "category": "Array",
    "description": "Given an integer array nums sorted in non-decreasing order, remove the duplicates in-place such that each unique element appears only once. The relative order of the elements should be kept the same. Then return the number of unique elements in nums.\n\nConsider the number of unique elements of nums to be k, to get accepted, you need to do the following things:\n- Change the array nums such that the first k elements of nums contain the unique elements in the order they were present in nums initially.\n- The remaining elements of nums are not important as well as the size of nums.\n- Return k.",
    "examples": [
      {
        "input": "nums = [1,1,2]",
        "output": "2, nums = [1,2,_]",
        "explanation": "Your function should return k = 2, with the first two elements of nums being 1 and 2 respectively."
      },
      {
        "input": "nums = [0,0,1,1,1,2,2,3,3,4]",
        "output": "5, nums = [0,1,2,3,4,_,_,_,_,_]",
        "explanation": "Your function should return k = 5, with the first five elements of nums being 0, 1, 2, 3, and 4 respectively."
      }
    ],
    "constraints": [
      "1 <= nums.length <= 3 * 10^4",
      "-100 <= nums[i] <= 100",
      "nums is sorted in non-decreasing order."
    ],
    "testCases": [
      {
        "input": { "nums": [1, 1, 2] },
        "expected": 2
      },
      {
        "input": { "nums": [0, 0, 1, 1, 1, 2, 2, 3, 3, 4] },
        "expected": 5
      }
    ]
  },
  {
    "id": 3,
    "title": "Remove Element",
    "difficulty": "Easy",
    "category": "Array",
    "description": "Given an integer array nums and an integer val, remove all occurrences of val in nums in-place. The order of the elements may be changed. Then return the number of elements in nums which are not equal to val.\n\nConsider the number of elements in nums which are not equal to val be k, to get accepted, you need to do the following things:\n- Change the array nums such that the first k elements of nums contain the elements which are not equal to val.\n- The remaining elements of nums are not important as well as the size of nums.\n- Return k.",
    "examples": [
      {
        "input": "nums = [3,2,2,3], val = 3",
        "output": "2, nums = [2,2,_,_]",
        "explanation": "Your function should return k = 2, with the first two elements of nums being 2."
      },
      {
        "input": "nums = [0,1,2,2,3,0,4,2], val = 2",
        "output": "5, nums = [0,1,4,0,3,_,_,_]",
        "explanation": "Your function should return k = 5, with the first five elements of nums containing 0, 0, 1, 3, and 4."
      }
    ],
    "constraints": [
      "0 <= nums.length <= 100",
      "0 <= nums[i] <= 50",
      "0 <= val <= 100"
    ],
    "testCases": [
      {
        "input": { "nums": [3, 2, 2, 3], "val": 3 },
        "expected": 2
      },
      {
        "input": { "nums": [0, 1, 2, 2, 3, 0, 4, 2], "val": 2 },
        "expected": 5
      }
    ]
  },
  {
    "id": 4,
    "title": "Search Insert Position",
    "difficulty": "Easy",
    "category": "Array",
    "description": "Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.\n\nYou must write an algorithm with O(log n) runtime complexity.",
    "examples": [
      {
        "input": "nums = [1,3,5,6], target = 5",
        "output": "2"
      },
      {
        "input": "nums = [1,3,5,6], target = 2",
        "output": "1"
      },
      {
        "input": "nums = [1,3,5,6], target = 7",
        "output": "4"
      }
    ],
    "constraints": [
      "1 <= nums.length <= 10^4",
      "-10^4 <= nums[i] <= 10^4",
      "nums contains distinct values sorted in ascending order.",
      "-10^4 <= target <= 10^4"
    ],
    "testCases": [
      {
        "input": { "nums": [1, 3, 5, 6], "target": 5 },
        "expected": 2
      },
      {
        "input": { "nums": [1, 3, 5, 6], "target": 2 },
        "expected": 1
      },
      {
        "input": { "nums": [1, 3, 5, 6], "target": 7 },
        "expected": 4
      }
    ]
  },
  {
    "id": 5,
    "title": "Plus One",
    "difficulty": "Easy",
    "category": "Array",
    "description": "You are given a large integer represented as an integer array digits, where each digits[i] is the ith digit of the integer. The digits are ordered from most significant to least significant in left-to-right order. The large integer does not contain any leading 0's.\n\nIncrement the large integer by one and return the resulting array of digits.",
    "examples": [
      {
        "input": "digits = [1,2,3]",
        "output": "[1,2,4]",
        "explanation": "The array represents the integer 123. Incrementing by one gives 123 + 1 = 124."
      },
      {
        "input": "digits = [4,3,2,1]",
        "output": "[4,3,2,2]",
        "explanation": "The array represents the integer 4321. Incrementing by one gives 4321 + 1 = 4322."
      },
      {
        "input": "digits = [9]",
        "output": "[1,0]",
        "explanation": "The array represents the integer 9. Incrementing by one gives 9 + 1 = 10."
      }
    ],
    "constraints": [
      "1 <= digits.length <= 100",
      "0 <= digits[i] <= 9",
      "digits does not contain any leading 0's."
    ],
    "testCases": [
      {
        "input": { "digits": [1, 2, 3] },
        "expected": [1, 2, 4]
      },
      {
        "input": { "digits": [4, 3, 2, 1] },
        "expected": [4, 3, 2, 2]
      },
      {
        "input": { "digits": [9] },
        "expected": [1, 0]
      }
    ]
  },
  {
    "id": 6,
    "title": "Merge Sorted Array",
    "difficulty": "Easy",
    "category": "Array",
    "description": "You are given two integer arrays nums1 and nums2, sorted in non-decreasing order, and two integers m and n, representing the number of elements in nums1 and nums2 respectively.\n\nMerge nums1 and nums2 into a single array sorted in non-decreasing order.\n\nThe final sorted array should not be returned by the function, but instead be stored inside the array nums1. To accommodate this, nums1 has a length of m + n, where the first m elements denote the elements that should be merged, and the last n elements are set to 0 and should be ignored. nums2 has a length of n.",
    "examples": [
      {
        "input": "nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3",
        "output": "[1,2,2,3,5,6]",
        "explanation": "The arrays we are merging are [1,2,3] and [2,5,6]. The result of the merge is [1,2,2,3,5,6]."
      },
      {
        "input": "nums1 = [1], m = 1, nums2 = [], n = 0",
        "output": "[1]",
        "explanation": "The arrays we are merging are [1] and []."
      }
    ],
    "constraints": [
      "nums1.length == m + n",
      "nums2.length == n",
      "0 <= m, n <= 200",
      "1 <= m + n <= 200",
      "-10^9 <= nums1[i], nums2[j] <= 10^9"
    ],
    "testCases": [
      {
        "input": { "nums1": [1, 2, 3, 0, 0, 0], "m": 3, "nums2": [2, 5, 6], "n": 3 },
        "expected": [1, 2, 2, 3, 5, 6]
      },
      {
        "input": { "nums1": [1], "m": 1, "nums2": [], "n": 0 },
        "expected": [1]
      }
    ]
  },
  {
    "id": 7,
    "title": "Contains Duplicate",
    "difficulty": "Easy",
    "category": "Array",
    "description": "Given an integer array nums, return true if any value appears at least twice in the array, and return false if every element is distinct.",
    "examples": [
      {
        "input": "nums = [1,2,3,1]",
        "output": "true"
      },
      {
        "input": "nums = [1,2,3,4]",
        "output": "false"
      },
      {
        "input": "nums = [1,1,1,3,3,4,3,2,4,2]",
        "output": "true"
      }
    ],
    "constraints": [
      "1 <= nums.length <= 10^5",
      "-10^9 <= nums[i] <= 10^9"
    ],
    "testCases": [
      {
        "input": { "nums": [1, 2, 3, 1] },
        "expected": true
      },
      {
        "input": { "nums": [1, 2, 3, 4] },
        "expected": false
      },
      {
        "input": { "nums": [1, 1, 1, 3, 3, 4, 3, 2, 4, 2] },
        "expected": true
      }
    ]
  },
  {
    "id": 8,
    "title": "Maximum Subarray",
    "difficulty": "Easy",
    "category": "Array",
    "description": "Given an integer array nums, find the subarray with the largest sum, and return its sum.",
    "examples": [
      {
        "input": "nums = [-2,1,-3,4,-1,2,1,-5,4]",
        "output": "6",
        "explanation": "The subarray [4,-1,2,1] has the largest sum 6."
      },
      {
        "input": "nums = [1]",
        "output": "1",
        "explanation": "The subarray [1] has the largest sum 1."
      },
      {
        "input": "nums = [5,4,-1,7,8]",
        "output": "23",
        "explanation": "The subarray [5,4,-1,7,8] has the largest sum 23."
      }
    ],
    "constraints": [
      "1 <= nums.length <= 10^5",
      "-10^4 <= nums[i] <= 10^4"
    ],
    "testCases": [
      {
        "input": { "nums": [-2, 1, -3, 4, -1, 2, 1, -5, 4] },
        "expected": 6
      },
      {
        "input": { "nums": [1] },
        "expected": 1
      },
      {
        "input": { "nums": [5, 4, -1, 7, 8] },
        "expected": 23
      }
    ]
  },
  {
    "id": 9,
    "title": "Pascal's Triangle",
    "difficulty": "Easy",
    "category": "Array",
    "description": "Given an integer numRows, return the first numRows of Pascal's triangle.\n\nIn Pascal's triangle, each number is the sum of the two numbers directly above it.",
    "examples": [
      {
        "input": "numRows = 5",
        "output": "[[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1]]"
      },
      {
        "input": "numRows = 1",
        "output": "[[1]]"
      }
    ],
    "constraints": [
      "1 <= numRows <= 30"
    ],
    "testCases": [
      {
        "input": { "numRows": 5 },
        "expected": [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1]]
      },
      {
        "input": { "numRows": 1 },
        "expected": [[1]]
      }
    ]
  },
  {
    "id": 10,
    "title": "Best Time to Buy and Sell Stock",
    "difficulty": "Easy",
    "category": "Array",
    "description": "You are given an array prices where prices[i] is the price of a given stock on the ith day.\n\nYou want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.\n\nReturn the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.",
    "examples": [
      {
        "input": "prices = [7,1,5,3,6,4]",
        "output": "5",
        "explanation": "Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5."
      },
      {
        "input": "prices = [7,6,4,3,1]",
        "output": "0",
        "explanation": "In this case, no transactions are done and the max profit = 0."
      }
    ],
    "constraints": [
      "1 <= prices.length <= 10^5",
      "0 <= prices[i] <= 10^4"
    ],
    "testCases": [
      {
        "input": { "prices": [7, 1, 5, 3, 6, 4] },
        "expected": 5
      },
      {
        "input": { "prices": [7, 6, 4, 3, 1] },
        "expected": 0
      }
    ]
  },
  {
    "id": 11,
    "title": "Single Number",
    "difficulty": "Easy",
    "category": "Array",
    "description": "Given a non-empty array of integers nums, every element appears twice except for one. Find that single one.\n\nYou must implement a solution with a linear runtime complexity and use only constant extra space.",
    "examples": [
      {
        "input": "nums = [2,2,1]",
        "output": "1"
      },
      {
        "input": "nums = [4,1,2,1,2]",
        "output": "4"
      },
      {
        "input": "nums = [1]",
        "output": "1"
      }
    ],
    "constraints": [
      "1 <= nums.length <= 3 * 10^4",
      "-3 * 10^4 <= nums[i] <= 3 * 10^4",
      "Each element in the array appears twice except for one element which appears only once."
    ],
    "testCases": [
      {
        "input": { "nums": [2, 2, 1] },
        "expected": 1
      },
      {
        "input": { "nums": [4, 1, 2, 1, 2] },
        "expected": 4
      },
      {
        "input": { "nums": [1] },
        "expected": 1
      }
    ]
  },
  {
    "id": 12,
    "title": "Majority Element",
    "difficulty": "Easy",
    "category": "Array",
    "description": "Given an array nums of size n, return the majority element.\n\nThe majority element is the element that appears more than n / 2 times. You may assume that the majority element always exists in the array.",
    "examples": [
      {
        "input": "nums = [3,2,3]",
        "output": "3"
      },
      {
        "input": "nums = [2,2,1,1,1,2,2]",
        "output": "2"
      }
    ],
    "constraints": [
      "n == nums.length",
      "1 <= n <= 5 * 10^4",
      "-10^9 <= nums[i] <= 10^9"
    ],
    "testCases": [
      {
        "input": { "nums": [3, 2, 3] },
        "expected": 3
      },
      {
        "input": { "nums": [2, 2, 1, 1, 1, 2, 2] },
        "expected": 2
      }
    ]
  },
  {
    "id": 13,
    "title": "Move Zeroes",
    "difficulty": "Easy",
    "category": "Array",
    "description": "Given an integer array nums, move all 0's to the end of it while maintaining the relative order of the non-zero elements.\n\nNote that you must do this in-place without making a copy of the array.",
    "examples": [
      {
        "input": "nums = [0,1,0,3,12]",
        "output": "[1,3,12,0,0]"
      },
      {
        "input": "nums = [0]",
        "output": "[0]"
      }
    ],
    "constraints": [
      "1 <= nums.length <= 10^4",
      "-2^31 <= nums[i] <= 2^31 - 1"
    ],
    "testCases": [
      {
        "input": { "nums": [0, 1, 0, 3, 12] },
        "expected": [1, 3, 12, 0, 0]
      },
      {
        "input": { "nums": [0] },
        "expected": [0]
      }
    ]
  },
  {
    "id": 14,
    "title": "Intersection of Two Arrays II",
    "difficulty": "Easy",
    "category": "Array",
    "description": "Given two integer arrays nums1 and nums2, return an array of their intersection. Each element in the result must appear as many times as it shows in both arrays and you may return the result in any order.",
    "examples": [
      {
        "input": "nums1 = [1,2,2,1], nums2 = [2,2]",
        "output": "[2,2]"
      },
      {
        "input": "nums1 = [4,9,5], nums2 = [9,4,9,8,4]",
        "output": "[4,9] or [9,4]"
      }
    ],
    "constraints": [
      "1 <= nums1.length, nums2.length <= 1000",
      "0 <= nums1[i], nums2[i] <= 1000"
    ],
    "testCases": [
      {
        "input": { "nums1": [1, 2, 2, 1], "nums2": [2, 2] },
        "expected": [2, 2]
      },
      {
        "input": { "nums1": [4, 9, 5], "nums2": [9, 4, 9, 8, 4] },
        "expected": [4, 9]
      }
    ]
  },
  {
    "id": 15,
    "title": "Valid Anagram",
    "difficulty": "Easy",
    "category": "Array",
    "description": "Given two strings s and t, return true if t is an anagram of s, and false otherwise.\n\nAn Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.",
    "examples": [
      {
        "input": "s = \"anagram\", t = \"nagaram\"",
        "output": "true"
      },
      {
        "input": "s = \"rat\", t = \"car\"",
        "output": "false"
      }
    ],
    "constraints": [
      "1 <= s.length, t.length <= 5 * 10^4",
      "s and t consist of lowercase English letters."
    ],
    "testCases": [
      {
        "input": { "s": "anagram", "t": "nagaram" },
        "expected": true
      },
      {
        "input": { "s": "rat", "t": "car" },
        "expected": false
      }
    ]
  },
  {
    "id": 16,
    "title": "Missing Number",
    "difficulty": "Easy",
    "category": "Array",
    "description": "Given an array nums containing n distinct numbers in the range [0, n], return the only number in the range that is missing from the array.",
    "examples": [
      {
        "input": "nums = [3,0,1]",
        "output": "2",
        "explanation": "n = 3 since there are 3 numbers, so all numbers are in the range [0,3]. 2 is the missing number in the range since it does not appear in nums."
      },
      {
        "input": "nums = [0,1]",
        "output": "2",
        "explanation": "n = 2 since there are 2 numbers, so all numbers are in the range [0,2]. 2 is the missing number in the range since it does not appear in nums."
      },
      {
        "input": "nums = [9,6,4,2,3,5,7,0,1]",
        "output": "8",
        "explanation": "n = 9 since there are 9 numbers, so all numbers are in the range [0,9]. 8 is the missing number in the range since it does not appear in nums."
      }
    ],
    "constraints": [
      "n == nums.length",
      "1 <= n <= 10^4",
      "0 <= nums[i] <= n",
      "All the numbers of nums are unique."
    ],
    "testCases": [
      {
        "input": { "nums": [3, 0, 1] },
        "expected": 2
      },
      {
        "input": { "nums": [0, 1] },
        "expected": 2
      },
      {
        "input": { "nums": [9, 6, 4, 2, 3, 5, 7, 0, 1] },
        "expected": 8
      }
    ]
  },
  {
    "id": 17,
    "title": "Find All Numbers Disappeared in an Array",
    "difficulty": "Easy",
    "category": "Array",
    "description": "Given an array nums of n integers where nums[i] is in the range [1, n], return an array of all the integers in the range [1, n] that do not appear in nums.",
    "examples": [
      {
        "input": "nums = [4,3,2,7,8,2,3,1]",
        "output": "[5,6]"
      },
      {
        "input": "nums = [1,1]",
        "output": "[2]"
      }
    ],
    "constraints": [
      "n == nums.length",
      "1 <= n <= 10^5",
      "1 <= nums[i] <= n"
    ],
    "testCases": [
      {
        "input": { "nums": [4, 3, 2, 7, 8, 2, 3, 1] },
        "expected": [5, 6]
      },
      {
        "input": { "nums": [1, 1] },
        "expected": [2]
      }
    ]
  },
  {
    "id": 18,
    "title": "Third Maximum Number",
    "difficulty": "Easy",
    "category": "Array",
    "description": "Given an integer array nums, return the third distinct maximum number in this array. If the third maximum does not exist, return the maximum number.",
    "examples": [
      {
        "input": "nums = [3,2,1]",
        "output": "1",
        "explanation": "The first distinct maximum is 3. The second distinct maximum is 2. The third distinct maximum is 1."
      },
      {
        "input": "nums = [1,2]",
        "output": "2",
        "explanation": "The first distinct maximum is 2. The second distinct maximum is 1. The third distinct maximum does not exist, so the maximum (2) is returned instead."
      },
      {
        "input": "nums = [2,2,3,1]",
        "output": "1",
        "explanation": "The first distinct maximum is 3. The second distinct maximum is 2. The third distinct maximum is 1."
      }
    ],
    "constraints": [
      "1 <= nums.length <= 10^4",
      "-2^31 <= nums[i] <= 2^31 - 1"
    ],
    "testCases": [
      {
        "input": { "nums": [3, 2, 1] },
        "expected": 1
      },
      {
        "input": { "nums": [1, 2] },
        "expected": 2
      },
      {
        "input": { "nums": [2, 2, 3, 1] },
        "expected": 1
      }
    ]
  },
  {
    "id": 19,
    "title": "Find Pivot Index",
    "difficulty": "Easy",
    "category": "Array",
    "description": "Given an array of integers nums, calculate the pivot index of this array.\n\nThe pivot index is the index where the sum of all the numbers strictly to the left of the index is equal to the sum of all the numbers strictly to the index's right.\n\nIf the index is on the left edge of the array, then the left sum is 0 because there are no elements to the left. This also applies to the right edge of the array.\n\nReturn the leftmost pivot index. If no such index exists, return -1.",
    "examples": [
      {
        "input": "nums = [1,7,3,6,5,6]",
        "output": "3",
        "explanation": "The pivot index is 3. Left sum = nums[0] + nums[1] + nums[2] = 1 + 7 + 3 = 11. Right sum = nums[4] + nums[5] = 5 + 6 = 11."
      },
      {
        "input": "nums = [1,2,3]",
        "output": "-1",
        "explanation": "There is no index that satisfies the conditions in the problem statement."
      },
      {
        "input": "nums = [2,1,-1]",
        "output": "0",
        "explanation": "The pivot index is 0. Left sum = 0. Right sum = nums[1] + nums[2] = 1 + -1 = 0."
      }
    ],
    "constraints": [
      "1 <= nums.length <= 10^4",
      "-1000 <= nums[i] <= 1000"
    ],
    "testCases": [
      {
        "input": { "nums": [1, 7, 3, 6, 5, 6] },
        "expected": 3
      },
      {
        "input": { "nums": [1, 2, 3] },
        "expected": -1
      },
      {
        "input": { "nums": [2, 1, -1] },
        "expected": 0
      }
    ]
  },
  {
    "id": 20,
    "title": "Sort Array By Parity",
    "difficulty": "Easy",
    "category": "Array",
    "description": "Given an integer array nums, move all the even integers at the beginning of the array followed by all the odd integers.\n\nReturn any array that satisfies this condition.",
    "examples": [
      {
        "input": "nums = [3,1,2,4]",
        "output": "[2,4,3,1]",
        "explanation": "The outputs [4,2,3,1], [2,4,1,3], and [4,2,1,3] would also be accepted."
      },
      {
        "input": "nums = [0]",
        "output": "[0]"
      }
    ],
    "constraints": [
      "1 <= nums.length <= 5000",
      "0 <= nums[i] <= 5000"
    ],
    "testCases": [
      {
        "input": { "nums": [3, 1, 2, 4] },
        "expected": [2, 4, 3, 1]
      },
      {
        "input": { "nums": [0] },
        "expected": [0]
      }
    ]
  }
]
